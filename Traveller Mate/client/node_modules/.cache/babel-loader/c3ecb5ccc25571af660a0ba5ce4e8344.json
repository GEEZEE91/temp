{"ast":null,"code":"var _jsxFileName = \"/Volumes/backup/traveller_mate/temp/Traveller Mate/client/src/components/CustomFields/AiportSearch.js\";\nimport React, { useState } from 'react';\nimport { Form } from 'semantic-ui-react';\n\nconst airports = require('airport-codes');\n\nconst AirportSearch = ({\n  type,\n  name,\n  amadeus,\n  searchData,\n  setSearchData\n}) => {\n  // type is for setting the name of the form, \"Origin\", \"Destination\" are 2 types\n  // name is the key term in searchData, which will then be saved to be sent to API\n  // searchData is the object to query to amadeus\n  const [options, setOptions] = useState([{}]);\n  const [isDisable, setDisable] = useState(true);\n  const [searchTerm, setSearchTerm] = useState(''); // term to query to amadeus\n\n  const [error, setError] = useState(false);\n\n  const handleChange = (e, {\n    value\n  }) => {\n    setSearchTerm(value);\n    setError(false);\n    if (value) setDisable(false);\n    if (!value) setDisable(true);\n    setOptions([{}]);\n  };\n\n  const handleSearch = () => {\n    if (searchTerm) {\n      // setLoading(true);\n      amadeus.referenceData.locations.get({\n        keyword: searchTerm,\n        subType: 'AIRPORT'\n      }).then(({\n        data\n      }) => {\n        if (data.length) {\n          setError(false);\n          const cleanedData = data.filter(airport => airports.findWhere({\n            iata: airport.iataCode\n          })); // Use filter to find results that is an airport, as it might return a city, or airport that is not available in database\n\n          const resultOptions = cleanedData.map(option => {\n            return {\n              key: option.id,\n              text: `${airports.findWhere({\n                iata: option.iataCode\n              }).get('name')} (${option.iataCode})`,\n              value: option.iataCode\n            };\n          });\n          if (resultOptions.length) setOptions(resultOptions);else setError({\n            content: 'No result found with this search term'\n          });\n        } else {\n          setOptions([{}]);\n          setError({\n            content: 'No result found'\n          });\n          setSearchData({ ...searchData,\n            [name]: false\n          }); // The data is set to false fo that it can be check easily\n        }\n      }).catch(responseError => {\n        console.log(responseError);\n      });\n    } else setError({\n      content: 'Please enter a location'\n    });\n  };\n\n  const saveOption = (e, {\n    value\n  }) => {\n    // Save the option to the search data\n    setSearchData({ ...searchData,\n      [name]: value\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(Form.Group, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Form.Input, {\n    width: 4,\n    label: `Find ${type} location`,\n    value: searchTerm,\n    placeholder: \"Search airport\",\n    onChange: handleChange,\n    onBlur: handleSearch,\n    error: error,\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Form.Select, {\n    width: 12,\n    label: `${type} airport`,\n    options: options,\n    placeholder: \"Please select an option\",\n    disabled: isDisable,\n    onChange: saveOption,\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default AirportSearch;","map":{"version":3,"sources":["/Volumes/backup/traveller_mate/temp/Traveller Mate/client/src/components/CustomFields/AiportSearch.js"],"names":["React","useState","Form","airports","require","AirportSearch","type","name","amadeus","searchData","setSearchData","options","setOptions","isDisable","setDisable","searchTerm","setSearchTerm","error","setError","handleChange","e","value","handleSearch","referenceData","locations","get","keyword","subType","then","data","length","cleanedData","filter","airport","findWhere","iata","iataCode","resultOptions","map","option","key","id","text","content","catch","responseError","console","log","saveOption"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport {Form} from 'semantic-ui-react';\n\nconst airports = require('airport-codes');\n\nconst AirportSearch = ({type, name, amadeus, searchData, setSearchData})=>{\n    // type is for setting the name of the form, \"Origin\", \"Destination\" are 2 types\n    // name is the key term in searchData, which will then be saved to be sent to API\n    // searchData is the object to query to amadeus\n    const [options, setOptions] = useState([{}]);\n    const [isDisable, setDisable] = useState(true);\n    const [searchTerm, setSearchTerm] = useState(''); // term to query to amadeus\n    const [error,setError] = useState(false);\n\n    const handleChange =(e,{value})=>{\n        setSearchTerm(value);\n        setError(false);\n        if (value) setDisable(false);\n        if (!value) setDisable(true);\n        setOptions([{}]);\n    }\n    const handleSearch = ()=>{\n        if (searchTerm) {\n            // setLoading(true);\n            amadeus.referenceData.locations.get({\n                keyword : searchTerm,\n                subType : 'AIRPORT'\n            }).then(({data})=>{\n                if (data.length){\n                    setError(false);\n                    const cleanedData = data.filter(airport => airports.findWhere({ iata: airport.iataCode }));\n                    // Use filter to find results that is an airport, as it might return a city, or airport that is not available in database\n                    const resultOptions = cleanedData.map((option)=>{\n                        return {key: option.id, \n                                text: `${airports.findWhere({ iata: option.iataCode }).get('name')} (${option.iataCode})`,\n                                value: option.iataCode\n                            }\n                    }); \n                    if (resultOptions.length) setOptions(resultOptions);\n                    else setError({ content: 'No result found with this search term' });\n                }\n                else {\n                    setOptions([{}]);\n                    setError({ content: 'No result found' });\n                    setSearchData({...searchData, [name]: false});\n                    // The data is set to false fo that it can be check easily\n                }\n            }).catch((responseError) => {\n                console.log(responseError);\n            });\n        }else setError({ content: 'Please enter a location' });\n    }\n    const saveOption = (e,{value})=>{\n        // Save the option to the search data\n        setSearchData({...searchData, [name]: value});\n    }\n    return (\n        <Form.Group >\n            <Form.Input  \n                width={4} \n                label={`Find ${type} location`} \n                value={searchTerm}\n                placeholder='Search airport'\n                onChange={handleChange}\n                onBlur={handleSearch}\n                error={error}\n                required\n            />\n            <Form.Select\n                width={12}\n                label={`${type} airport`}\n                options={options}\n                placeholder='Please select an option'\n                disabled={isDisable}\n                onChange={saveOption}\n                required\n            />\n        </Form.Group>\n            \n    );\n}\n\nexport default AirportSearch;"]},"metadata":{},"sourceType":"module"}