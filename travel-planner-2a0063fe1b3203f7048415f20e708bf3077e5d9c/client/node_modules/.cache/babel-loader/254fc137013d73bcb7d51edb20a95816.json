{"ast":null,"code":"var _jsxFileName = \"/Volumes/backup/traveller_mate/temp/travel-planner-2a0063fe1b3203f7048415f20e708bf3077e5d9c/client/src/components/CustomFields/signUpCheck.js\";\nimport React, { useState } from 'react';\nimport { Form } from 'semantic-ui-react';\nimport { CHECK_USERNAME, CHECK_EMAIL } from '../../utils/mutations';\nimport { useMutation } from '@apollo/react-hooks';\n\nconst UserCheck = ({\n  type,\n  name,\n  userFormData,\n  setUserFormData\n}) => {\n  // Type is for the label, while name is for the field to be query\n  // Once onBlur is triggered, the component will check if the input is valid, and then save into data query\n  const [field, setField] = useState('');\n  const [error, setError] = useState(false);\n  const [checkUsername] = useMutation(CHECK_USERNAME);\n  const [checkEmail] = useMutation(CHECK_EMAIL);\n\n  const handleChange = (e, {\n    value\n  }) => {\n    setField(value);\n    setError(false);\n  };\n\n  const handleSave = async () => {\n    let check;\n    if (type === 'Username') check = await checkUsername({\n      variables: {\n        [name]: field\n      }\n    });\n    if (type === 'Email') check = await checkEmail({\n      variables: {\n        [name]: field\n      }\n    }); // Server will return a boolean, which is then used to check if the \n\n    if (check.data) {\n      const result = check.data.checkUsername || check.data.checkEmail;\n      if (!result) setUserFormData({ ...userFormData,\n        [name]: field\n      });else setError({\n        content: `${type} is already in use`\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Form.Input, {\n    fluid: true,\n    label: `${type}`,\n    placeholder: `${type}`,\n    onChange: handleChange,\n    onBlur: handleSave,\n    error: error,\n    value: field,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  });\n};\n\nexport default UserCheck;","map":{"version":3,"sources":["/Volumes/backup/traveller_mate/temp/travel-planner-2a0063fe1b3203f7048415f20e708bf3077e5d9c/client/src/components/CustomFields/signUpCheck.js"],"names":["React","useState","Form","CHECK_USERNAME","CHECK_EMAIL","useMutation","UserCheck","type","name","userFormData","setUserFormData","field","setField","error","setError","checkUsername","checkEmail","handleChange","e","value","handleSave","check","variables","data","result","content"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAAQC,IAAR,QAAmB,mBAAnB;AACA,SAAQC,cAAR,EAAwBC,WAAxB,QAA0C,uBAA1C;AACA,SAAQC,WAAR,QAA0B,qBAA1B;;AAEA,MAAMC,SAAS,GAAG,CAAC;AAACC,EAAAA,IAAD;AAAOC,EAAAA,IAAP;AAAaC,EAAAA,YAAb;AAA2BC,EAAAA;AAA3B,CAAD,KAAiD;AAC/D;AACA;AACA,QAAM,CAACC,KAAD,EAAOC,QAAP,IAAiBX,QAAQ,CAAC,EAAD,CAA/B;AACA,QAAM,CAACY,KAAD,EAAOC,QAAP,IAAiBb,QAAQ,CAAC,KAAD,CAA/B;AAEA,QAAM,CAACc,aAAD,IAAiBV,WAAW,CAACF,cAAD,CAAlC;AACA,QAAM,CAACa,UAAD,IAAcX,WAAW,CAACD,WAAD,CAA/B;;AAEA,QAAMa,YAAY,GAAE,CAACC,CAAD,EAAG;AAACC,IAAAA;AAAD,GAAH,KAAa;AAC7BP,IAAAA,QAAQ,CAACO,KAAD,CAAR;AACAL,IAAAA,QAAQ,CAAC,KAAD,CAAR;AACH,GAHD;;AAKA,QAAMM,UAAU,GAAG,YAAW;AAC1B,QAAIC,KAAJ;AACA,QAAId,IAAI,KAAK,UAAb,EAAyBc,KAAK,GAAG,MAAMN,aAAa,CAAC;AAACO,MAAAA,SAAS,EAAC;AAAC,SAACd,IAAD,GAAOG;AAAR;AAAX,KAAD,CAA3B;AACzB,QAAIJ,IAAI,KAAK,OAAb,EAAsBc,KAAK,GAAG,MAAML,UAAU,CAAC;AAACM,MAAAA,SAAS,EAAC;AAAC,SAACd,IAAD,GAAOG;AAAR;AAAX,KAAD,CAAxB,CAHI,CAI1B;;AAEA,QAAIU,KAAK,CAACE,IAAV,EAAgB;AACZ,YAAMC,MAAM,GAAGH,KAAK,CAACE,IAAN,CAAWR,aAAX,IAA4BM,KAAK,CAACE,IAAN,CAAWP,UAAtD;AACA,UAAI,CAACQ,MAAL,EAAad,eAAe,CAAC,EAAC,GAAGD,YAAJ;AAAkB,SAACD,IAAD,GAAQG;AAA1B,OAAD,CAAf,CAAb,KACKG,QAAQ,CAAC;AAACW,QAAAA,OAAO,EAAG,GAAElB,IAAK;AAAlB,OAAD,CAAR;AACR;AACJ,GAXD;;AAaA,sBACI,oBAAC,IAAD,CAAM,KAAN;AACI,IAAA,KAAK,MADT;AAEI,IAAA,KAAK,EAAG,GAAEA,IAAK,EAFnB;AAGI,IAAA,WAAW,EAAG,GAAEA,IAAK,EAHzB;AAII,IAAA,QAAQ,EAAEU,YAJd;AAKI,IAAA,MAAM,EAAEG,UALZ;AAMI,IAAA,KAAK,EAAEP,KANX;AAOI,IAAA,KAAK,EAAEF,KAPX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAWH,CAtCD;;AAwCA,eAAeL,SAAf","sourcesContent":["import React, {useState} from 'react';\nimport {Form} from 'semantic-ui-react';\nimport {CHECK_USERNAME, CHECK_EMAIL} from '../../utils/mutations';\nimport {useMutation} from '@apollo/react-hooks';\n\nconst UserCheck = ({type, name, userFormData, setUserFormData}) => {\n    // Type is for the label, while name is for the field to be query\n    // Once onBlur is triggered, the component will check if the input is valid, and then save into data query\n    const [field,setField]=useState('');\n    const [error,setError]=useState(false);\n\n    const [checkUsername] =useMutation(CHECK_USERNAME);\n    const [checkEmail] =useMutation(CHECK_EMAIL);\n\n    const handleChange =(e,{value})=>{\n        setField(value);\n        setError(false);\n    }\n\n    const handleSave = async () =>{\n        let check;\n        if (type === 'Username') check = await checkUsername({variables:{[name]:field}})\n        if (type === 'Email') check = await checkEmail({variables:{[name]:field}})\n        // Server will return a boolean, which is then used to check if the \n\n        if (check.data) {\n            const result = check.data.checkUsername || check.data.checkEmail;\n            if (!result) setUserFormData({...userFormData, [name]: field});\n            else setError({content: `${type} is already in use`});\n        } \n    }\n\n    return (\n        <Form.Input \n            fluid \n            label={`${type}`} \n            placeholder={`${type}`}\n            onChange={handleChange}\n            onBlur={handleSave}\n            error={error}\n            value={field}\n        />\n    )\n}\n\nexport default UserCheck;"]},"metadata":{},"sourceType":"module"}