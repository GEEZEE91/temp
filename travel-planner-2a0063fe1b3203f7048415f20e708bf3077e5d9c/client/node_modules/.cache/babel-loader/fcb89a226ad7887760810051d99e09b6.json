{"ast":null,"code":"var _jsxFileName = \"/Volumes/backup/traveller_mate/temp/travel-planner-2a0063fe1b3203f7048415f20e708bf3077e5d9c/client/src/components/Landing/Signup.js\";\nimport React, { useState } from 'react';\nimport { Form, Button, Message, Modal, Input } from 'semantic-ui-react';\nimport { useMutation } from '@apollo/react-hooks';\nimport { ADD_USER } from '../../utils/mutations';\nimport SignUpCheck from '../CustomFields/signUpCheck';\nimport Auth from '../../utils/auth';\n\nconst LoginForm = () => {\n  const [userFormData, setUserFormData] = useState({\n    username: '',\n    email: '',\n    password: ''\n  }); // set signupUser as mutation\n\n  const [signupUser, loginError] = useMutation(ADD_USER);\n  const [isLoading, setLoading] = useState(false);\n  const [showAlert, setShowAlert] = useState(false); // using error to show alert, check only when there's an error\n  // useEffect(() => {\n  //     if (error) setShowAlert(true);\n  //     else setShowAlert(false);\n  // }, [loginError]);\n\n  const [open, setOpen] = useState(false); // For Modal\n\n  const inlineStyle = {\n    modal: {\n      height: 'auto',\n      top: 'auto',\n      left: 'auto',\n      bottom: 'auto',\n      right: 'auto',\n      width: '300px'\n    }\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault(); // console.log(userFormData);\n\n    setLoading(true);\n\n    try {\n      const response = await signupUser({\n        variables: { ...userFormData\n        }\n      });\n      const token = response.data.addUser.token; // console.log(token);\n\n      Auth.login(token);\n      setOpen(false);\n    } catch (err) {\n      // console.log(err);\n      setLoading(false);\n      setShowAlert(true);\n    }\n  };\n\n  const handleInput = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setUserFormData({ ...userFormData,\n      [name]: value\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(Modal, {\n    onClose: () => setOpen(false),\n    onOpen: () => setOpen(true),\n    open: open,\n    style: inlineStyle.modal,\n    trigger: /*#__PURE__*/React.createElement(Button, {\n      color: 'green',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 18\n      }\n    }, \" Signup\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Modal.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    loading: isLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(SignUpCheck, {\n    type: \"Username\",\n    name: \"username\",\n    userFormData: userFormData,\n    setUserFormData: setUserFormData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(SignUpCheck, {\n    type: \"Email\",\n    name: \"email\",\n    userFormData: userFormData,\n    setUserFormData: setUserFormData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Form.Field, {\n    control: Input,\n    label: \"Password\",\n    name: \"password\",\n    type: 'password',\n    onChange: handleInput,\n    placeholder: \"Password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 21\n    }\n  }), showAlert ? /*#__PURE__*/React.createElement(Message, {\n    negative: true,\n    header: \"Signup failed\",\n    content: \"Please try again\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 34\n    }\n  }) : /*#__PURE__*/React.createElement(React.Fragment, null), /*#__PURE__*/React.createElement(Form.Field, {\n    fluid: true,\n    control: Button,\n    color: 'blue',\n    onClick: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 21\n    }\n  }, \"Submit\"))));\n};\n\nexport default LoginForm;","map":{"version":3,"sources":["/Volumes/backup/traveller_mate/temp/travel-planner-2a0063fe1b3203f7048415f20e708bf3077e5d9c/client/src/components/Landing/Signup.js"],"names":["React","useState","Form","Button","Message","Modal","Input","useMutation","ADD_USER","SignUpCheck","Auth","LoginForm","userFormData","setUserFormData","username","email","password","signupUser","loginError","isLoading","setLoading","showAlert","setShowAlert","open","setOpen","inlineStyle","modal","height","top","left","bottom","right","width","handleSubmit","e","preventDefault","response","variables","token","data","addUser","login","err","handleInput","event","name","value","target"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport { Form, Button, Message, Modal, Input } from 'semantic-ui-react';\nimport {useMutation} from '@apollo/react-hooks';\nimport {ADD_USER} from '../../utils/mutations';\nimport SignUpCheck from '../CustomFields/signUpCheck';\nimport Auth from '../../utils/auth';\n\n\nconst LoginForm = ()=>{\n\n    const [userFormData, setUserFormData] = useState({ username: '',email:'',password: '' });\n\n    // set signupUser as mutation\n    const [signupUser, loginError] = useMutation(ADD_USER);\n\n    const [isLoading, setLoading]=useState(false);\n\n    const [showAlert, setShowAlert] = useState(false);\n    // using error to show alert, check only when there's an error\n    // useEffect(() => {\n    //     if (error) setShowAlert(true);\n    //     else setShowAlert(false);\n    // }, [loginError]);\n\n    const [open, setOpen] = useState(false); // For Modal\n\n    const inlineStyle = {\n        modal : {\n          height: 'auto',\n          top: 'auto',\n          left: 'auto',\n          bottom: 'auto',\n          right: 'auto',\n          width:'300px',\n        }\n      };\n\n    const handleSubmit = async (e)=>{\n        e.preventDefault();\n        // console.log(userFormData);\n        setLoading(true);\n        try {\n            const response = await signupUser(\n              { \n                variables: {...userFormData}\n              });\n              \n            const token= response.data.addUser.token;\n            // console.log(token);\n            Auth.login(token);\n            setOpen(false);\n        } catch (err) {\n            // console.log(err);\n            setLoading(false);\n            setShowAlert(true);\n        }\n    }\n    const handleInput = (event) => {\n        const { name, value } = event.target;\n        setUserFormData({ ...userFormData, [name]: value });\n    };\n\n    return (\n        <Modal onClose={() => setOpen(false)}\n        onOpen={() => setOpen(true)}\n        open={open} style={inlineStyle.modal}\n        trigger={<Button color = {'green'}> Signup</Button> }>\n            <Modal.Content>\n                <Form loading={isLoading} >\n                    <SignUpCheck type='Username' name='username' userFormData={userFormData} setUserFormData={setUserFormData}/>\n                    <SignUpCheck type='Email' name='email' userFormData={userFormData} setUserFormData={setUserFormData}/>\n                    <Form.Field\n                        control={Input}\n                        label='Password'\n                        name='password'\n                        type = {'password'}\n                        onChange={handleInput}\n                        placeholder='Password'\n                    />\n                     {showAlert?(<Message negative header='Signup failed' content='Please try again'/>):(<></>)}\n                    <Form.Field fluid control={Button} color = {'blue'} onClick={handleSubmit}>Submit</Form.Field>\n                </Form>\n            </Modal.Content>\n\n        </Modal>\n    )\n}\n\nexport default LoginForm;"]},"metadata":{},"sourceType":"module"}