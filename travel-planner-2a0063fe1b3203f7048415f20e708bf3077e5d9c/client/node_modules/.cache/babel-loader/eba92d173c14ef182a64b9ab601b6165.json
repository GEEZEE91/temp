{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\zivko\\\\Music\\\\travel-planner-2a0063fe1b3203f7048415f20e708bf3077e5d9c\\\\client\\\\src\\\\components\\\\CustomFields\\\\NumberInput.js\";\nimport React, { useState } from 'react';\nimport { Form } from 'semantic-ui-react';\n\nconst NumberInput = ({\n  type,\n  name,\n  searchData,\n  setSearchData,\n  isRequired\n}) => {\n  // Type is for the label, while name is for the field to be query\n  // Once onBlur is triggered, the component will check if the input is valid, and then save into data query\n  const [count, setCount] = useState('');\n  const [error, setError] = useState(false);\n\n  const handleChange = (e, {\n    value\n  }) => {\n    setCount(value);\n    setError(false);\n  };\n\n  const handleSave = () => {\n    if (!isNaN(parseInt(count))) {\n      setSearchData({ ...searchData,\n        [name]: parseInt(count)\n      });\n    } else {\n      if (isRequired || count) {\n        setError({\n          content: \"Please enter a valid number\"\n        });\n        if (isRequired) setSearchData({ ...searchData,\n          [name]: false\n        }); // If required, set it to false for easy error checking\n      } else {\n        // If the field is empty or invalid and not required, remove the property so that it doesn't interfere with the query\n        let temp = searchData;\n        delete temp[name];\n        setSearchData(temp);\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Form.Input, {\n    fluid: true,\n    label: `${type}`,\n    value: count,\n    placeholder: \"Enter a number\",\n    onChange: handleChange,\n    onBlur: handleSave,\n    error: error,\n    required: isRequired ? true : false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  });\n};\n\nexport default NumberInput;","map":{"version":3,"sources":["C:/Users/zivko/Music/travel-planner-2a0063fe1b3203f7048415f20e708bf3077e5d9c/client/src/components/CustomFields/NumberInput.js"],"names":["React","useState","Form","NumberInput","type","name","searchData","setSearchData","isRequired","count","setCount","error","setError","handleChange","e","value","handleSave","isNaN","parseInt","content","temp"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAAQC,IAAR,QAAmB,mBAAnB;;AAGA,MAAMC,WAAW,GAAG,CAAC;AAACC,EAAAA,IAAD;AAAOC,EAAAA,IAAP;AAAaC,EAAAA,UAAb;AAAyBC,EAAAA,aAAzB;AAAwCC,EAAAA;AAAxC,CAAD,KAAyD;AACzE;AACA;AACA,QAAM,CAACC,KAAD,EAAOC,QAAP,IAAiBT,QAAQ,CAAC,EAAD,CAA/B;AACA,QAAM,CAACU,KAAD,EAAOC,QAAP,IAAiBX,QAAQ,CAAC,KAAD,CAA/B;;AAEA,QAAMY,YAAY,GAAE,CAACC,CAAD,EAAG;AAACC,IAAAA;AAAD,GAAH,KAAa;AAC7BL,IAAAA,QAAQ,CAACK,KAAD,CAAR;AACAH,IAAAA,QAAQ,CAAC,KAAD,CAAR;AACH,GAHD;;AAKA,QAAMI,UAAU,GAAG,MAAK;AACpB,QAAI,CAACC,KAAK,CAACC,QAAQ,CAACT,KAAD,CAAT,CAAV,EAA6B;AACzBF,MAAAA,aAAa,CAAC,EAAC,GAAGD,UAAJ;AAAgB,SAACD,IAAD,GAAQa,QAAQ,CAACT,KAAD;AAAhC,OAAD,CAAb;AACH,KAFD,MAGK;AACD,UAAID,UAAU,IAAIC,KAAlB,EAAwB;AACpBG,QAAAA,QAAQ,CAAC;AAACO,UAAAA,OAAO,EAAE;AAAV,SAAD,CAAR;AACA,YAAIX,UAAJ,EAAgBD,aAAa,CAAC,EAAC,GAAGD,UAAJ;AAAgB,WAACD,IAAD,GAAQ;AAAxB,SAAD,CAAb,CAFI,CAGpB;AACH,OAJD,MAIO;AACH;AACA,YAAIe,IAAI,GAAGd,UAAX;AACA,eAAOc,IAAI,CAACf,IAAD,CAAX;AACAE,QAAAA,aAAa,CAACa,IAAD,CAAb;AACH;AACJ;AACJ,GAhBD;;AAkBA,sBACI,oBAAC,IAAD,CAAM,KAAN;AACI,IAAA,KAAK,MADT;AAEI,IAAA,KAAK,EAAG,GAAEhB,IAAK,EAFnB;AAGI,IAAA,KAAK,EAAEK,KAHX;AAII,IAAA,WAAW,EAAC,gBAJhB;AAKI,IAAA,QAAQ,EAAEI,YALd;AAMI,IAAA,MAAM,EAAEG,UANZ;AAOI,IAAA,KAAK,EAAEL,KAPX;AAQI,IAAA,QAAQ,EAAGH,UAAD,GAAa,IAAb,GAAkB,KARhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAYH,CAzCD;;AA2CA,eAAeL,WAAf","sourcesContent":["import React, {useState} from 'react';\nimport {Form} from 'semantic-ui-react';\n\n\nconst NumberInput = ({type, name, searchData, setSearchData, isRequired}) => {\n    // Type is for the label, while name is for the field to be query\n    // Once onBlur is triggered, the component will check if the input is valid, and then save into data query\n    const [count,setCount]=useState('');\n    const [error,setError]=useState(false);\n\n    const handleChange =(e,{value})=>{\n        setCount(value);\n        setError(false);\n    }\n\n    const handleSave = () =>{\n        if (!isNaN(parseInt(count))) {\n            setSearchData({...searchData, [name]: parseInt(count)})\n        }\n        else {\n            if (isRequired || count){\n                setError({content: \"Please enter a valid number\"});\n                if (isRequired) setSearchData({...searchData, [name]: false});\n                // If required, set it to false for easy error checking\n            } else {\n                // If the field is empty or invalid and not required, remove the property so that it doesn't interfere with the query\n                let temp = searchData;\n                delete temp[name];\n                setSearchData(temp);\n            }\n        }\n    }\n\n    return (\n        <Form.Input \n            fluid \n            label={`${type}`} \n            value={count}\n            placeholder='Enter a number'\n            onChange={handleChange}\n            onBlur={handleSave}\n            error={error}\n            required={(isRequired)?true:false}\n        />\n    )\n}\n\nexport default NumberInput;"]},"metadata":{},"sourceType":"module"}