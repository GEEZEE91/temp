{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\zivko\\\\Music\\\\temp\\\\travel-planner-2a0063fe1b3203f7048415f20e708bf3077e5d9c\\\\client\\\\src\\\\components\\\\CustomFields\\\\DateInput.js\";\nimport React, { useState } from 'react';\nimport moment from 'moment';\nimport { Form } from 'semantic-ui-react';\n\nconst DateInput = ({\n  type,\n  name,\n  searchData,\n  setSearchData,\n  isRequired\n}) => {\n  // Type is for the label, while name is for the field to be query\n  // Once onBlur is triggered, the component will check if the input is valid, and then save into data query\n  const [date, setDate] = useState('');\n  const [error, setError] = useState(false);\n\n  const handleChange = (e, {\n    value\n  }) => {\n    setDate(value);\n    setError(false);\n  };\n\n  const handleSave = () => {\n    const inputDate = moment(date, 'DD-MM-YYYY');\n    if (inputDate.isValid()) setSearchData({ ...searchData,\n      [name]: inputDate.format('YYYY-MM-DD')\n    });else {\n      if (isRequired || date) {\n        setError({\n          content: \"Please enter a valid date\"\n        });\n        if (isRequired) setSearchData({ ...searchData,\n          [name]: false\n        }); // If required, set it to false for easy error checking\n      } else {\n        // If the field is empty or invalid and not required, remove the property so that it doesn't interfere with the query\n        let temp = searchData;\n        delete temp[name];\n        setSearchData(temp);\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Form.Input, {\n    fluid: true,\n    label: `${type} date`,\n    value: date,\n    placeholder: \"DD-MM-YYYY\",\n    onChange: handleChange,\n    onBlur: handleSave,\n    error: error,\n    required: isRequired ? true : false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  });\n};\n\nexport default DateInput;","map":{"version":3,"sources":["C:/Users/zivko/Music/temp/travel-planner-2a0063fe1b3203f7048415f20e708bf3077e5d9c/client/src/components/CustomFields/DateInput.js"],"names":["React","useState","moment","Form","DateInput","type","name","searchData","setSearchData","isRequired","date","setDate","error","setError","handleChange","e","value","handleSave","inputDate","isValid","format","content","temp"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAAQC,IAAR,QAAmB,mBAAnB;;AAGA,MAAMC,SAAS,GAAG,CAAC;AAACC,EAAAA,IAAD;AAAOC,EAAAA,IAAP;AAAaC,EAAAA,UAAb;AAAyBC,EAAAA,aAAzB;AAAwCC,EAAAA;AAAxC,CAAD,KAAyD;AACvE;AACA;AACA,QAAM,CAACC,IAAD,EAAMC,OAAN,IAAeV,QAAQ,CAAC,EAAD,CAA7B;AACA,QAAM,CAACW,KAAD,EAAOC,QAAP,IAAiBZ,QAAQ,CAAC,KAAD,CAA/B;;AAEA,QAAMa,YAAY,GAAE,CAACC,CAAD,EAAG;AAACC,IAAAA;AAAD,GAAH,KAAa;AAC7BL,IAAAA,OAAO,CAACK,KAAD,CAAP;AACAH,IAAAA,QAAQ,CAAC,KAAD,CAAR;AACH,GAHD;;AAKA,QAAMI,UAAU,GAAG,MAAK;AACpB,UAAMC,SAAS,GAAGhB,MAAM,CAACQ,IAAD,EAAO,YAAP,CAAxB;AACA,QAAIQ,SAAS,CAACC,OAAV,EAAJ,EAAyBX,aAAa,CAAC,EAAC,GAAGD,UAAJ;AAAgB,OAACD,IAAD,GAAQY,SAAS,CAACE,MAAV,CAAiB,YAAjB;AAAxB,KAAD,CAAb,CAAzB,KACK;AACD,UAAIX,UAAU,IAAIC,IAAlB,EAAuB;AACnBG,QAAAA,QAAQ,CAAC;AAACQ,UAAAA,OAAO,EAAE;AAAV,SAAD,CAAR;AACA,YAAIZ,UAAJ,EAAgBD,aAAa,CAAC,EAAC,GAAGD,UAAJ;AAAgB,WAACD,IAAD,GAAQ;AAAxB,SAAD,CAAb,CAFG,CAGnB;AACH,OAJD,MAIO;AACH;AACA,YAAIgB,IAAI,GAAGf,UAAX;AACA,eAAOe,IAAI,CAAChB,IAAD,CAAX;AACAE,QAAAA,aAAa,CAACc,IAAD,CAAb;AACH;AACJ;AACJ,GAfD;;AAiBA,sBACI,oBAAC,IAAD,CAAM,KAAN;AACI,IAAA,KAAK,MADT;AAEI,IAAA,KAAK,EAAG,GAAEjB,IAAK,OAFnB;AAGI,IAAA,KAAK,EAAEK,IAHX;AAII,IAAA,WAAW,EAAC,YAJhB;AAKI,IAAA,QAAQ,EAAEI,YALd;AAMI,IAAA,MAAM,EAAEG,UANZ;AAOI,IAAA,KAAK,EAAEL,KAPX;AAQI,IAAA,QAAQ,EAAGH,UAAD,GAAa,IAAb,GAAkB,KARhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAYH,CAxCD;;AA0CA,eAAeL,SAAf","sourcesContent":["import React, {useState} from 'react';\nimport moment from 'moment';\nimport {Form} from 'semantic-ui-react';\n\n\nconst DateInput = ({type, name, searchData, setSearchData, isRequired}) => {\n    // Type is for the label, while name is for the field to be query\n    // Once onBlur is triggered, the component will check if the input is valid, and then save into data query\n    const [date,setDate]=useState('');\n    const [error,setError]=useState(false);\n\n    const handleChange =(e,{value})=>{\n        setDate(value);\n        setError(false);\n    }\n\n    const handleSave = () =>{\n        const inputDate = moment(date, 'DD-MM-YYYY');\n        if (inputDate.isValid()) setSearchData({...searchData, [name]: inputDate.format('YYYY-MM-DD')});\n        else {\n            if (isRequired || date){\n                setError({content: \"Please enter a valid date\"});\n                if (isRequired) setSearchData({...searchData, [name]: false});\n                // If required, set it to false for easy error checking\n            } else {\n                // If the field is empty or invalid and not required, remove the property so that it doesn't interfere with the query\n                let temp = searchData;\n                delete temp[name];\n                setSearchData(temp);\n            }\n        }\n    }\n\n    return (\n        <Form.Input \n            fluid \n            label={`${type} date`} \n            value={date}\n            placeholder='DD-MM-YYYY'\n            onChange={handleChange}\n            onBlur={handleSave}\n            error={error}\n            required={(isRequired)?true:false}\n        />\n    )\n}\n\nexport default DateInput;"]},"metadata":{},"sourceType":"module"}